package com.klef.dev.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import com.klef.dev.entity.Project;
import com.klef.dev.service.ProjectService;

@RestController
@RequestMapping("/projectapi")
@CrossOrigin(origins = "*")
public class ProjectController {

    @Autowired
    private ProjectService projectService;

    // Home endpoint
    @GetMapping("/")
    public String home() {
        return "Jenkins Full Stack Deployment API is running...";
    }

    // Add new project
    @PostMapping("/add")
    public ResponseEntity<Project> addProject(@RequestBody Project project) {
        Project savedProject = projectService.addProject(project);
        return new ResponseEntity<>(savedProject, HttpStatus.CREATED);
    }

    // View all projects
    @GetMapping("/all")
    public ResponseEntity<List<Project>> getAllProjects() {
        List<Project> projects = projectService.viewAllProjects();
        return new ResponseEntity<>(projects, HttpStatus.OK);
    }

    // Get project by ID
    @GetMapping("/get/{id}")
    public ResponseEntity<?> getProjectById(@PathVariable int id) {
        Project project = projectService.getProjectById(id);
        if (project != null) {
            return new ResponseEntity<>(project, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Project with ID " + id + " not found.", HttpStatus.NOT_FOUND);
        }
    }

    // Update project
    @PutMapping("/update")
    public ResponseEntity<?> updateProject(@RequestBody Project project) {
        Project existing = projectService.getProjectById(project.getId());
        if (existing != null) {
            Project updatedProject = projectService.updateProject(project);
            return new ResponseEntity<>(updatedProject, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Cannot update. Project with ID " + project.getId() + " not found.", HttpStatus.NOT_FOUND);
        }
    }

    // Delete project
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteProject(@PathVariable int id) {
        Project existing = projectService.getProjectById(id);
        if (existing != null) {
            projectService.deleteProject(id);
            return new ResponseEntity<>("Project with ID " + id + " deleted successfully.", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Cannot delete. Project with ID " + id + " not found.", HttpStatus.NOT_FOUND);
        }
    }
}
